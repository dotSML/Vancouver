@page
@using System.Runtime.InteropServices.ComTypes
@using Microsoft.AspNetCore.Identity
@using Models
@using SendGrid
@using CustomerFolder
@model Vancouver.Pages.TicketTestModel
@{
    ViewData["Title"] = "My Tickets";
}

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ICustomersRepository CustomersRepository
<head>
    <link href="~/css/bootstrapIndex.css" rel="stylesheet" />
    <link href="~/css/myTickets.css" rel="stylesheet" />
    <link href="css/boardingPass.css" rel="stylesheet" />
    <script src="lib/jquery/dist/jquery.js"></script>
    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        td, th {
            border: 1px solid #dddddd;
            border-radius: 7px;
            text-align: left;
            padding: 8px;
        }
    </style>
</head>
<body>
    @{
        if (SignInManager.IsSignedIn(User))
        {
            if (@Model.UserOrders.Any())
            {
                var ordersCount = Model.UserOrders.Count();

                
                    <div class="bookingReferenceResults niceShadow">
                        <h3>Found results for @ordersCount trips</h3>
                    </div>

                    for (int i = 0; i < ordersCount; i++)
                    {
                        var currentOrder = Model.UserOrders.ElementAt(i);
                        for (int c = 0; c < currentOrder.Tickets.Count(); c++)
                        {

                            var currentTicket = Model.UserOrders.ElementAt(i).Tickets.ElementAt(c);
                            <div class="bookingReferenceResults niceShadow">

                                <h2>Ticket for Passenger @currentTicket.Customer.FirstName @currentTicket.Customer.LastName</h2>
                                <div class="row">
                                    <div class="col ticket-col in-or-outbound">
                                        <div class="row">
                                            <div class="flight-leg-text">Outbound</div>
                                            <img src="/images/takeoff right left.png" alt="plane takeoff">
                                        </div>
                                    </div>
                                    <div class="col ticket-col in-or-outbound">
                                        <div class="row">
                                            <div class="flight-leg-text">Inbound</div>
                                            <img src="/images/takeoff left right.png" alt="plane takeoff">
                                        </div>
                                    </div>
                                </div>



                                <div class="row">
                                    <div class="col ticket-col ticket-background">
                                        <h1>@currentOrder.OrderItinerary.originAirportOutbound - @currentOrder.OrderItinerary.originAirportInbound</h1>

                                        <p>First name: @currentTicket.Customer.FirstName</p>
                                        <p>Last name: @currentTicket.Customer.LastName</p>

                                        <p>Outbound: @currentOrder.OrderItinerary.departureTimeOutbound.Split("T")[0] @currentOrder.OrderItinerary.departureTimeOutbound.Split("T")[1]</p>
                                        <p>Trip duration: @currentOrder.OrderItinerary.tripDurationOutbound hours</p>
                                        <p>Arrival: @currentOrder.OrderItinerary.arrivalTimeOutbound.Split("T")[0] @currentOrder.OrderItinerary.arrivalTimeOutbound.Split("T")[1]</p>
                                    </div>
                                    <div class="col ticket-col ticket-background">
                                        <h1>@currentOrder.OrderItinerary.arrivalAirportOutbound - @currentOrder.OrderItinerary.arrivalAirportInbound</h1>

                                        <p>First name: @currentTicket.Customer.FirstName</p>
                                        <p>Last name: @currentTicket.Customer.LastName</p>
                                        @if (@currentOrder.OrderItinerary.departureTimeInbound != null)
                                        {
                                            <p>Inbound: @currentOrder.OrderItinerary.departureTimeInbound.Split("T")[0] @currentOrder.OrderItinerary.departureTimeInbound.Split("T")[1]</p>
                                            <p>Trip duration: @currentOrder.OrderItinerary.tripDurationInbound hours</p>
                                            <p>Arrival: @currentOrder.OrderItinerary.arrivalTimeInbound.Split("T")[0] @currentOrder.OrderItinerary.arrivalTimeInbound.Split("T")[1]</p>
                                        }
                                    </div>
                                </div>
                            </div>

                        }
                    }

                

            }
            else
            {
                <p>No itineraries found :'(</p>
            }
        }
        else
        {
            <div class="itineraryIDSearchBox niceShadow">
                <p style="font-size: 25px;">Search for your trips by entering the itinerary ID</p>
                <form method="post" style="max-width: 50%">
                    <div class="form-group">
                        <label asp-for="@Model.ItinerarySearch.ItineraryId">Booking reference</label>
                        <input asp-for="@Model.ItinerarySearch.ItineraryId" type="text" class="form-control" style="margin-bottom: 10px;" />
                        @*<label asp-for="@Model.ItinerarySearch.LastName">Last name</label>
                            <input asp-for="@Model.ItinerarySearch.LastName" type="text" class="form-control" />*@
                        <input type="submit" class="btn btn-primary" value="Search" />
                    </div>
                </form>
            </div>
        }

        if (@Model.CustomerOrders != null)
        {
            var ordersCount = Model.CustomerOrders.Count();
            <div class="bookingReferenceResults niceShadow">
                <h3>Found results for @ordersCount trips</h3>
            </div>

            for (int i = 0; i < ordersCount; i++)
            {
                var currentOrder = Model.CustomerOrders.ElementAt(i);
                for (int c = 0; c < currentOrder.Tickets.Count(); c++)
                {

                    var currentTicket = Model.CustomerOrders.ElementAt(i).Tickets.ElementAt(c);
                    <div class="bookingReferenceResults niceShadow">

                        <h2>Ticket for Passenger @currentTicket.Customer.FirstName @currentTicket.Customer.LastName</h2>
                        <div class="row">
                            <div class="col ticket-col in-or-outbound">
                                <div class="row">
                                    <div class="flight-leg-text">Outbound</div>
                                    <img src="/images/takeoff right left.png" alt="plane takeoff">
                                </div>
                            </div>
                            <div class="col ticket-col in-or-outbound">
                                <div class="row">
                                    <div class="flight-leg-text">Inbound</div>
                                    <img src="/images/takeoff left right.png" alt="plane takeoff">
                                </div>
                            </div>
                        </div>



                        <div class="row">
                            <div class="col ticket-col ticket-background">
                                <h1>@currentOrder.OrderItinerary.originAirportOutbound - @currentOrder.OrderItinerary.originAirportInbound</h1>

                                <p>First name: @currentTicket.Customer.FirstName</p>
                                <p>Last name: @currentTicket.Customer.LastName</p>

                                <p>Outbound: @currentOrder.OrderItinerary.departureTimeOutbound.Split("T")[0] @currentOrder.OrderItinerary.departureTimeOutbound.Split("T")[1]</p>
                                <p>Trip duration: @currentOrder.OrderItinerary.tripDurationOutbound hours</p>
                                <p>Arrival: @currentOrder.OrderItinerary.arrivalTimeOutbound.Split("T")[0] @currentOrder.OrderItinerary.arrivalTimeOutbound.Split("T")[1]</p>
                            </div>
                            <div class="col ticket-col ticket-background">
                                <h1>@currentOrder.OrderItinerary.arrivalAirportOutbound - @currentOrder.OrderItinerary.arrivalAirportInbound</h1>

                                <p>First name: @currentTicket.Customer.FirstName</p>
                                <p>Last name: @currentTicket.Customer.LastName</p>
                                @if (@currentOrder.OrderItinerary.departureTimeInbound != null)
                                {
                                    <p>Inbound: @currentOrder.OrderItinerary.departureTimeInbound.Split("T")[0] @currentOrder.OrderItinerary.departureTimeInbound.Split("T")[1]</p>
                                    <p>Trip duration: @currentOrder.OrderItinerary.tripDurationInbound hours</p>
                                    <p>Arrival: @currentOrder.OrderItinerary.arrivalTimeInbound.Split("T")[0] @currentOrder.OrderItinerary.arrivalTimeInbound.Split("T")[1]</p>
                                }
                            </div>
                        </div>
                    </div>

                }
            }
        }
    }
</body>

